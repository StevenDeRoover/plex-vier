VIER_VIDEO_STREAMING_URL = 'http://vod.streamcloud.be/%s/mp4:_definst_/%s.mp4/playlist.m3u8'
VIER_URL = "http://www.vier.be"

####################################################################################################
def NormalizeURL(url):

    if '#' in url and '|' in url and not '?' in url:
        return url

    return url.split('#')[0].split('?')[0]

####################################################################################################

def MetadataObjectForURL(url):

    # Request the URL
    html = HTML.ElementFromURL(url)

    if len(html.xpath("//head//meta[@property='og:title']")) < 1:
        raise Ex.MediaNotAvailable

    try:
        title = html.xpath("//head//meta[@property='og:title']")[0].get('content')
        description = html.xpath("//head//meta[@name='description']")[0].get('content')
        thumb = html.xpath("//head//meta[@property='og:image']")[0].get('content')
#        date = html.xpath("//div[@class='ds-left']//div[contains(@class, 'field-name-post-date')]")[0].text
#        originally_available_at = Datetime.ParseDate(date).date()
    except:
        raise Ex.MediaNotAvailable

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb,
#        originally_available_at = originally_available_at
    )

####################################################################################################

def MediaObjectsForURL(url):
    return [
        MediaObject(
            optimized_for_streaming = True,
            audio_channels = 2,
            video_resolution = 'sd',
            parts = [
                PartObject(
                    key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                )
            ]
        )
    ]

####################################################################################################

def Login(html):
    if(html.xpath('count(.//form[contains(@id, "user-login-form")])') != 0):
	  Log("Should log in")
          loginform = html.xpath('.//form[contains(@id, "user-login-form")]')[0]
	  # get canonical first
          canonical = html.xpath("//head//link[@rel='canonical']")[0].get('href')          
          inputs = loginform.xpath(".//input")
          logindata = {}
          logindata["name"] = "stevenderoover@gmail.com"
          logindata["pass"]= "plugintest"
          for inputt in inputs:
            inputname = inputt.xpath("@name")[0]
            Log(inputname)
            if(inputname != "name" and inputname != "pass"):
              inputvalue = inputt.xpath("@value")[0]
              logindata[inputname] = inputvalue

          r = HTTP.Request(VIER_URL + "/user?destination=" + canonical, logindata, cacheTime=0)
	  return HTML.ElementFromString(r.content)
    else:
	  Log("Should not log in")
          return html

@indirect
def PlayVideo(url, **kwargs):
    Log("Playing video from page: " + url)
    # Request the URL

    r = HTTP.Request(url)

    html = HTML.ElementFromString(r.content)
    html = Login(html)

    filename = html.xpath('.//div[contains(@class, "field-name-field-video-path")]//div')[1].get('data-filename')
    if (filename == None):
        divsearch = './/div[starts-with(@class, "video_player_") and contains(@class, "_data")]'
	divsearch = "//*[@data-filename]"
	Log(divsearch)
        div = html.xpath(divsearch)
	Log("div" + str(len(div)))
	filename = html.xpath(divsearch)[0].get("data-filename")
    application = html.xpath('.//div[contains(@class, "field-name-field-video-path")]//div')[1].get('data-application')
    if (application == None):
	application = html.xpath('.//div[starts_with(@class, "video_player_") and contains("_data")]')[0].get('data-application')
    video_url = VIER_VIDEO_STREAMING_URL % (application, filename)
    Log.Info(video_url)

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(video_url))
